import example.*

describe "tests de la empresa de mensajeria y los mensajeros"
{	//parte 1
	test "roberto(90kg) con CAMION y 3 acoplado NO PASA por el puente"{
		roberto.viaje(camion)
		camion.nuevoacoplado(3)
		assert.notThat(pBrooklyn.dejaPasar(roberto))
		//dejaPasar retorna falso, pero lo niego con notThat para q sea true
		//de lo contrario falla el test. luego, se afirma q NO PASA...
	}
	test "roberto(90kg) con CAMION y 2 acoplado NO PASA por el puente"{
		roberto.viaje(camion)
		camion.nuevoacoplado(2)
		assert.notThat(pBrooklyn.dejaPasar(roberto))
		//idem aqui.
	}
	test "roberto(90kg) con CAMION y 1 acoplado PASA por el puente"{
		roberto.viaje(camion)
		camion.nuevoacoplado(1)
		assert.that(pBrooklyn.dejaPasar(roberto))
		//pasa sin problema.
	}
	test "roberto(90kg) con su BICICLETA PASA por el puente, SIEMPRE"{
		roberto.viaje(bici)
		assert.that(pBrooklyn.dejaPasar(roberto))
		//pasa sin problema.
	}
	test "roberto(90kg) NO ENTRA a la matrix, NUNCA"{
		assert.notThat(laMatrix.dejaPasar(roberto))
		//pasa sin problema.
	}
	test "chuck norrys(900kg) PASA por el puente, SIEMPRE"{
		assert.that(pBrooklyn.dejaPasar(chucknorris))
	}
	test "chuck norrys(900kg) ENTRA a la matrix, SIEMPRE"{
		assert.that(laMatrix.dejaPasar(chucknorris))
	}
	test "la humanidad cree en dios, y dios cree en chuck norris"{
		assert.that(true)
	}
	test "neo PASA por el puente"{
		assert.that(pBrooklyn.dejaPasar(neo))
	}
	test "neo NO TIENE CREDITO, no puede entrar a la matrix($0 por defecto)"{
		assert.notThat(laMatrix.dejaPasar(neo))
	}
	test "neo TIENE CREDITO, puede entrar a la matrix"{
		neo.recarga(100)
		assert.that(laMatrix.dejaPasar(neo))
	}
	test "neo TIENE CREDITO pero no puede llevar el paquete a la matrix por que no esta pago"{
		neo.recarga(100)
		paquete.enviarDestino(laMatrix)
		assert.notThat(paquete.puedeSerEntregadoPor(neo))
	}
	test "neo TIENE CREDITO y puede llevar el paquete a la matrix por que esta pago"{
		neo.recarga(100)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		assert.that(paquete.puedeSerEntregadoPor(neo))
	}
	//parte 2
	test "la empresa no tiene a nadie contratado, ni paquetes entregados pero si pendientes"{
		assert.equals(0, empresaMensajeria.cantMensajeros())
		assert.equals(0, empresaMensajeria.cantPaqEntr())
		assert.equals(3, empresaMensajeria.cantPaqPend())
	}
	test "la empresa ah contratado a 3"{
		empresaMensajeria.contratar(neo)
		empresaMensajeria.contratar(roberto)
		empresaMensajeria.contratar(chucknorris)
		assert.equals(3, empresaMensajeria.cantMensajeros())
	}
	test "la empresa ah contratado a 6"{
		empresaMensajeria.contratar(neo)
		empresaMensajeria.contratar(roberto)
		empresaMensajeria.contratar(chucknorris)
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		assert.equals(6, empresaMensajeria.cantMensajeros())
	}
	test "la empresa ah contratado a 3, pero macri llego despues"{
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		empresaMensajeria.despedirA(neo)
		assert.equals(2, empresaMensajeria.cantMensajeros())
		empresaMensajeria.despedirA(roberto)
		assert.equals(1, empresaMensajeria.cantMensajeros())
	}
	test "la empresa ah contratado a 6, pero macri se enojo despues"{
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		empresaMensajeria.despedirA(neo)
		assert.equals(5, empresaMensajeria.cantMensajeros())
		empresaMensajeria.despedirA(roberto)
		assert.equals(4, empresaMensajeria.cantMensajeros())
	}
	test "la empresa ah contratado a 9, pero macri fundio la economia"{
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		empresaMensajeria.despedirATodos()
		assert.equals(0, empresaMensajeria.cantMensajeros())
	}
	test "la empresa ah contratado a 2, pero NO ES grande"{
		empresaMensajeria.contratarATodos([neo, roberto])
		assert.equals(false, empresaMensajeria.esGrande())
	}
	test "la empresa ah contratado a 4, ES grande"{
		empresaMensajeria.contratarATodos([neo, roberto])
		empresaMensajeria.contratarATodos([neo, roberto])
		assert.equals(true, empresaMensajeria.esGrande())
	}
	test "neo esta primero, NO TIENE CREDITO, NO PUEDE entregarlo a la matrix"{
		neo.recarga(0)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		assert.notThat(empresaMensajeria.elPrimeroPuedeEntregar())
	}
	test "neo esta primero, TIENE CREDITO, PUEDE entregarlo a la matrix"{
		neo.recarga(100)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		assert.that(empresaMensajeria.elPrimeroPuedeEntregar())
	}
	test "roberto esta primero, NO TIENE CREDITO, NO PUEDE entregarlo a la matrix"{
		roberto.viaje(camion)
		camion.nuevoacoplado(1)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.notThat(empresaMensajeria.elPrimeroPuedeEntregar())
		
		roberto.viaje(bici)
		assert.notThat(empresaMensajeria.elPrimeroPuedeEntregar())
	}
	test "roberto(camion) esta ultimo, PUEDE pasar el puente por que pesa 590"{
		roberto.viaje(camion)
		camion.nuevoacoplado(1)
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([neo, chucknorris, roberto])
		assert.equals(590, empresaMensajeria.pesoDelUltimo())
	}
	test "roberto(bici) esta ultimo, PUEDE pasar el puente por que pesa 90"{
		roberto.viaje(bici)
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([neo, chucknorris, roberto])
		assert.equals(90, empresaMensajeria.pesoDelUltimo())
	}
	test "chucknorris pesa 900"{
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([neo, roberto, chucknorris])
		assert.equals(900, empresaMensajeria.pesoDelUltimo())
	}
	test "neo pesa 0"{
		empresaMensajeria.contratarATodos([roberto, chucknorris, neo])
		assert.equals(0, empresaMensajeria.pesoDelUltimo())
	}
	test "contrato a 3, solo hay uno(chucknorris) que pueda enviarlo a la matrix(con valores default)"{
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, chucknorris, neo])
		assert.equals(true, empresaMensajeria.algunoPuedeEntregar(paquete))
	}
	test "contrato a 4, sin chucknorris, no hay quien pueda enviarlo a la matrix(con valores default)"{
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, roberto, neo])
		assert.equals(false, empresaMensajeria.algunoPuedeEntregar(paquete))
	}
	test "contrato a neo nomas y le acredito para que pueda enviarlo a la matrix"{
		neo.recarga(100)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([neo])
		assert.equals(true, empresaMensajeria.algunoPuedeEntregar(paquete))
	}
	test "roberto ya de por si no puede pisar la matrix en camion"{
		roberto.viaje(camion)
		camion.nuevoacoplado(1)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratar(roberto)
		assert.equals(false, empresaMensajeria.algunoPuedeEntregar(paquete))
	}
	test "roberto ya de por si no puede pisar la matrix en bici"{
		roberto.viaje(bici)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratar(roberto)
		assert.equals(false, empresaMensajeria.algunoPuedeEntregar(paquete))
	}
	test "este paquete ES FACIL con roberto en bici y neo/chucknorris por defecto"{
		roberto.viaje(bici)
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.that(empresaMensajeria.paqueteFacil(paquete))
	}
	test "este paquete ES FACIL tambien con roberto en camion y neo/chucknorris por defecto"{
		roberto.viaje(camion)
		camion.nuevoacoplado(1)
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.that(empresaMensajeria.paqueteFacil(paquete))
	}
	test "este paquete NO ES FACIL"{
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.notThat(empresaMensajeria.paqueteFacil(paquete))
	}
	test "este paquete tiene 3 candidatos"{
		roberto.viaje(bici)
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.equals(3, empresaMensajeria.candidatosPara(paquete).size())
	}
	test "este paquete tiene 1 candidato, chucknorris, porque roberto no puede y neo no tiene credito"{
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.equals(1, empresaMensajeria.candidatosPara(paquete).size())
	}
	test "este paquete tiene 2 candidato, chucknorris y neo(tiene credito) y roberto no puede"{
		neo.recarga(100)
		paquete.enviarDestino(laMatrix)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.equals(2, empresaMensajeria.candidatosPara(paquete).size())
	}
	test "esta planta de empleados no tiene sobre peso(por defecto)"{
		roberto.viaje(camion)
		camion.nuevoacoplado(1)
		paquete.enviarDestino(pBrooklyn)
		paquete.pagarPaquete()
		empresaMensajeria.contratarATodos([roberto, neo, chucknorris])
		assert.equals(2, empresaMensajeria.candidatosPara(paquete).size())
	}
}















